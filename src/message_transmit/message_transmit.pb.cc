// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_transmit.proto

#include "message_transmit.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class MesTransReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MesTransReq> _instance;
} _MesTransReq_default_instance_;
class MesTransResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MesTransRes> _instance;
} _MesTransRes_default_instance_;
class HeartBeatReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartBeatReq> _instance;
} _HeartBeatReq_default_instance_;
class HeartBeatResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartBeatRes> _instance;
} _HeartBeatRes_default_instance_;
class UserOnlineReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserOnlineReq> _instance;
} _UserOnlineReq_default_instance_;
class UserOnlineResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserOnlineRes> _instance;
} _UserOnlineRes_default_instance_;
static void InitDefaultsscc_info_HeartBeatReq_message_5ftransmit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HeartBeatReq_default_instance_;
    new (ptr) ::HeartBeatReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HeartBeatReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartBeatReq_message_5ftransmit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeartBeatReq_message_5ftransmit_2eproto}, {}};

static void InitDefaultsscc_info_HeartBeatRes_message_5ftransmit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HeartBeatRes_default_instance_;
    new (ptr) ::HeartBeatRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HeartBeatRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartBeatRes_message_5ftransmit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeartBeatRes_message_5ftransmit_2eproto}, {}};

static void InitDefaultsscc_info_MesTransReq_message_5ftransmit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MesTransReq_default_instance_;
    new (ptr) ::MesTransReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MesTransReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MesTransReq_message_5ftransmit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MesTransReq_message_5ftransmit_2eproto}, {}};

static void InitDefaultsscc_info_MesTransRes_message_5ftransmit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MesTransRes_default_instance_;
    new (ptr) ::MesTransRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MesTransRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MesTransRes_message_5ftransmit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MesTransRes_message_5ftransmit_2eproto}, {}};

static void InitDefaultsscc_info_UserOnlineReq_message_5ftransmit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UserOnlineReq_default_instance_;
    new (ptr) ::UserOnlineReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserOnlineReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserOnlineReq_message_5ftransmit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserOnlineReq_message_5ftransmit_2eproto}, {}};

static void InitDefaultsscc_info_UserOnlineRes_message_5ftransmit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UserOnlineRes_default_instance_;
    new (ptr) ::UserOnlineRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserOnlineRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserOnlineRes_message_5ftransmit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserOnlineRes_message_5ftransmit_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_5ftransmit_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_message_5ftransmit_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_message_5ftransmit_2eproto[3];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_5ftransmit_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::MesTransReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MesTransReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MesTransReq, id_),
  PROTOBUF_FIELD_OFFSET(::MesTransReq, friend_id_),
  PROTOBUF_FIELD_OFFSET(::MesTransReq, message_),
  PROTOBUF_FIELD_OFFSET(::MesTransReq, time_stamp_),
  1,
  2,
  0,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MesTransRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HeartBeatReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HeartBeatReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HeartBeatReq, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::HeartBeatRes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HeartBeatRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HeartBeatRes, flag_),
  PROTOBUF_FIELD_OFFSET(::HeartBeatRes, message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::UserOnlineReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UserOnlineReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserOnlineReq, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::UserOnlineRes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UserOnlineRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserOnlineRes, flag_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::MesTransReq)},
  { 13, -1, sizeof(::MesTransRes)},
  { 18, 24, sizeof(::HeartBeatReq)},
  { 25, 32, sizeof(::HeartBeatRes)},
  { 34, 40, sizeof(::UserOnlineReq)},
  { 41, 47, sizeof(::UserOnlineRes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MesTransReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MesTransRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HeartBeatReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HeartBeatRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UserOnlineReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UserOnlineRes_default_instance_),
};

const char descriptor_table_protodef_message_5ftransmit_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026message_transmit.proto\"Q\n\013MesTransReq\022"
  "\n\n\002id\030\001 \002(\005\022\021\n\tfriend_id\030\002 \002(\005\022\017\n\007messag"
  "e\030\003 \002(\t\022\022\n\ntime_stamp\030\004 \002(\003\"\r\n\013MesTransR"
  "es\"\032\n\014HeartBeatReq\022\n\n\002id\030\001 \002(\005\"-\n\014HeartB"
  "eatRes\022\014\n\004flag\030\001 \002(\010\022\017\n\007message\030\002 \001(\t\"\033\n"
  "\rUserOnlineReq\022\n\n\002id\030\001 \002(\005\"\035\n\rUserOnline"
  "Res\022\014\n\004flag\030\001 \002(\0102\?\n\016MesTranService\022-\n\017T"
  "ransmitMessage\022\014.MesTransReq\032\014.MesTransR"
  "es2=\n\020HeartBeatService\022)\n\tHeartBeat\022\r.He"
  "artBeatReq\032\r.HeartBeatRes2A\n\021UserOnlineS"
  "ervice\022,\n\nUserOnline\022\016.UserOnlineReq\032\016.U"
  "serOnlineResB\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_5ftransmit_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_5ftransmit_2eproto_sccs[6] = {
  &scc_info_HeartBeatReq_message_5ftransmit_2eproto.base,
  &scc_info_HeartBeatRes_message_5ftransmit_2eproto.base,
  &scc_info_MesTransReq_message_5ftransmit_2eproto.base,
  &scc_info_MesTransRes_message_5ftransmit_2eproto.base,
  &scc_info_UserOnlineReq_message_5ftransmit_2eproto.base,
  &scc_info_UserOnlineRes_message_5ftransmit_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_5ftransmit_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_5ftransmit_2eproto = {
  false, false, descriptor_table_protodef_message_5ftransmit_2eproto, "message_transmit.proto", 457,
  &descriptor_table_message_5ftransmit_2eproto_once, descriptor_table_message_5ftransmit_2eproto_sccs, descriptor_table_message_5ftransmit_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_message_5ftransmit_2eproto::offsets,
  file_level_metadata_message_5ftransmit_2eproto, 6, file_level_enum_descriptors_message_5ftransmit_2eproto, file_level_service_descriptors_message_5ftransmit_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_5ftransmit_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_5ftransmit_2eproto)), true);

// ===================================================================

void MesTransReq::InitAsDefaultInstance() {
}
class MesTransReq::_Internal {
 public:
  using HasBits = decltype(std::declval<MesTransReq>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_friend_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

MesTransReq::MesTransReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MesTransReq)
}
MesTransReq::MesTransReq(const MesTransReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_stamp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(time_stamp_));
  // @@protoc_insertion_point(copy_constructor:MesTransReq)
}

void MesTransReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MesTransReq_message_5ftransmit_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_stamp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(time_stamp_));
}

MesTransReq::~MesTransReq() {
  // @@protoc_insertion_point(destructor:MesTransReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MesTransReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MesTransReq::ArenaDtor(void* object) {
  MesTransReq* _this = reinterpret_cast< MesTransReq* >(object);
  (void)_this;
}
void MesTransReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MesTransReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MesTransReq& MesTransReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MesTransReq_message_5ftransmit_2eproto.base);
  return *internal_default_instance();
}


void MesTransReq::Clear() {
// @@protoc_insertion_point(message_clear_start:MesTransReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_stamp_) -
        reinterpret_cast<char*>(&id_)) + sizeof(time_stamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MesTransReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 friend_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_friend_id(&has_bits);
          friend_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MesTransReq.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 time_stamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MesTransReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MesTransReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required int32 friend_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_friend_id(), target);
  }

  // required string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "MesTransReq.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // required int64 time_stamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_time_stamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MesTransReq)
  return target;
}

size_t MesTransReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MesTransReq)
  size_t total_size = 0;

  if (_internal_has_message()) {
    // required string message = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (_internal_has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (_internal_has_friend_id()) {
    // required int32 friend_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_friend_id());
  }

  if (_internal_has_time_stamp()) {
    // required int64 time_stamp = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_stamp());
  }

  return total_size;
}
size_t MesTransReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MesTransReq)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string message = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());

    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());

    // required int32 friend_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_friend_id());

    // required int64 time_stamp = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_stamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MesTransReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MesTransReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MesTransReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MesTransReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MesTransReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MesTransReq)
    MergeFrom(*source);
  }
}

void MesTransReq::MergeFrom(const MesTransReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MesTransReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      friend_id_ = from.friend_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_stamp_ = from.time_stamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MesTransReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MesTransReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MesTransReq::CopyFrom(const MesTransReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MesTransReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MesTransReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MesTransReq::InternalSwap(MesTransReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MesTransReq, time_stamp_)
      + sizeof(MesTransReq::time_stamp_)
      - PROTOBUF_FIELD_OFFSET(MesTransReq, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MesTransReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MesTransRes::InitAsDefaultInstance() {
}
class MesTransRes::_Internal {
 public:
};

MesTransRes::MesTransRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MesTransRes)
}
MesTransRes::MesTransRes(const MesTransRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MesTransRes)
}

void MesTransRes::SharedCtor() {
}

MesTransRes::~MesTransRes() {
  // @@protoc_insertion_point(destructor:MesTransRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MesTransRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MesTransRes::ArenaDtor(void* object) {
  MesTransRes* _this = reinterpret_cast< MesTransRes* >(object);
  (void)_this;
}
void MesTransRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MesTransRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MesTransRes& MesTransRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MesTransRes_message_5ftransmit_2eproto.base);
  return *internal_default_instance();
}


void MesTransRes::Clear() {
// @@protoc_insertion_point(message_clear_start:MesTransRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MesTransRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MesTransRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MesTransRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MesTransRes)
  return target;
}

size_t MesTransRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MesTransRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MesTransRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MesTransRes)
  GOOGLE_DCHECK_NE(&from, this);
  const MesTransRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MesTransRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MesTransRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MesTransRes)
    MergeFrom(*source);
  }
}

void MesTransRes::MergeFrom(const MesTransRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MesTransRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MesTransRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MesTransRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MesTransRes::CopyFrom(const MesTransRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MesTransRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MesTransRes::IsInitialized() const {
  return true;
}

void MesTransRes::InternalSwap(MesTransRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MesTransRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeartBeatReq::InitAsDefaultInstance() {
}
class HeartBeatReq::_Internal {
 public:
  using HasBits = decltype(std::declval<HeartBeatReq>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

HeartBeatReq::HeartBeatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HeartBeatReq)
}
HeartBeatReq::HeartBeatReq(const HeartBeatReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:HeartBeatReq)
}

void HeartBeatReq::SharedCtor() {
  id_ = 0;
}

HeartBeatReq::~HeartBeatReq() {
  // @@protoc_insertion_point(destructor:HeartBeatReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeartBeatReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HeartBeatReq::ArenaDtor(void* object) {
  HeartBeatReq* _this = reinterpret_cast< HeartBeatReq* >(object);
  (void)_this;
}
void HeartBeatReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartBeatReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartBeatReq& HeartBeatReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartBeatReq_message_5ftransmit_2eproto.base);
  return *internal_default_instance();
}


void HeartBeatReq::Clear() {
// @@protoc_insertion_point(message_clear_start:HeartBeatReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeatReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartBeatReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HeartBeatReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HeartBeatReq)
  return target;
}

size_t HeartBeatReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HeartBeatReq)
  size_t total_size = 0;

  // required int32 id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartBeatReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HeartBeatReq)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartBeatReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HeartBeatReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HeartBeatReq)
    MergeFrom(*source);
  }
}

void HeartBeatReq::MergeFrom(const HeartBeatReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HeartBeatReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void HeartBeatReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HeartBeatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatReq::CopyFrom(const HeartBeatReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HeartBeatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void HeartBeatReq::InternalSwap(HeartBeatReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeartBeatRes::InitAsDefaultInstance() {
}
class HeartBeatRes::_Internal {
 public:
  using HasBits = decltype(std::declval<HeartBeatRes>()._has_bits_);
  static void set_has_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

HeartBeatRes::HeartBeatRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HeartBeatRes)
}
HeartBeatRes::HeartBeatRes(const HeartBeatRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:HeartBeatRes)
}

void HeartBeatRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeartBeatRes_message_5ftransmit_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_ = false;
}

HeartBeatRes::~HeartBeatRes() {
  // @@protoc_insertion_point(destructor:HeartBeatRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeartBeatRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HeartBeatRes::ArenaDtor(void* object) {
  HeartBeatRes* _this = reinterpret_cast< HeartBeatRes* >(object);
  (void)_this;
}
void HeartBeatRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartBeatRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartBeatRes& HeartBeatRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartBeatRes_message_5ftransmit_2eproto.base);
  return *internal_default_instance();
}


void HeartBeatRes::Clear() {
// @@protoc_insertion_point(message_clear_start:HeartBeatRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  flag_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeatRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flag(&has_bits);
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "HeartBeatRes.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartBeatRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HeartBeatRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool flag = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_flag(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "HeartBeatRes.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HeartBeatRes)
  return target;
}

size_t HeartBeatRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HeartBeatRes)
  size_t total_size = 0;

  // required bool flag = 1;
  if (_internal_has_flag()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartBeatRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HeartBeatRes)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartBeatRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HeartBeatRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HeartBeatRes)
    MergeFrom(*source);
  }
}

void HeartBeatRes::MergeFrom(const HeartBeatRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HeartBeatRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      flag_ = from.flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeartBeatRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HeartBeatRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatRes::CopyFrom(const HeartBeatRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HeartBeatRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRes::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void HeartBeatRes::InternalSwap(HeartBeatRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserOnlineReq::InitAsDefaultInstance() {
}
class UserOnlineReq::_Internal {
 public:
  using HasBits = decltype(std::declval<UserOnlineReq>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UserOnlineReq::UserOnlineReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UserOnlineReq)
}
UserOnlineReq::UserOnlineReq(const UserOnlineReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:UserOnlineReq)
}

void UserOnlineReq::SharedCtor() {
  id_ = 0;
}

UserOnlineReq::~UserOnlineReq() {
  // @@protoc_insertion_point(destructor:UserOnlineReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserOnlineReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserOnlineReq::ArenaDtor(void* object) {
  UserOnlineReq* _this = reinterpret_cast< UserOnlineReq* >(object);
  (void)_this;
}
void UserOnlineReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserOnlineReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserOnlineReq& UserOnlineReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserOnlineReq_message_5ftransmit_2eproto.base);
  return *internal_default_instance();
}


void UserOnlineReq::Clear() {
// @@protoc_insertion_point(message_clear_start:UserOnlineReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserOnlineReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserOnlineReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserOnlineReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserOnlineReq)
  return target;
}

size_t UserOnlineReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserOnlineReq)
  size_t total_size = 0;

  // required int32 id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserOnlineReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserOnlineReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UserOnlineReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserOnlineReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserOnlineReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserOnlineReq)
    MergeFrom(*source);
  }
}

void UserOnlineReq::MergeFrom(const UserOnlineReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserOnlineReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void UserOnlineReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserOnlineReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOnlineReq::CopyFrom(const UserOnlineReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserOnlineReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOnlineReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UserOnlineReq::InternalSwap(UserOnlineReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserOnlineReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserOnlineRes::InitAsDefaultInstance() {
}
class UserOnlineRes::_Internal {
 public:
  using HasBits = decltype(std::declval<UserOnlineRes>()._has_bits_);
  static void set_has_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UserOnlineRes::UserOnlineRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UserOnlineRes)
}
UserOnlineRes::UserOnlineRes(const UserOnlineRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:UserOnlineRes)
}

void UserOnlineRes::SharedCtor() {
  flag_ = false;
}

UserOnlineRes::~UserOnlineRes() {
  // @@protoc_insertion_point(destructor:UserOnlineRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserOnlineRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserOnlineRes::ArenaDtor(void* object) {
  UserOnlineRes* _this = reinterpret_cast< UserOnlineRes* >(object);
  (void)_this;
}
void UserOnlineRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserOnlineRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserOnlineRes& UserOnlineRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserOnlineRes_message_5ftransmit_2eproto.base);
  return *internal_default_instance();
}


void UserOnlineRes::Clear() {
// @@protoc_insertion_point(message_clear_start:UserOnlineRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flag_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserOnlineRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flag(&has_bits);
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserOnlineRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserOnlineRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool flag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserOnlineRes)
  return target;
}

size_t UserOnlineRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserOnlineRes)
  size_t total_size = 0;

  // required bool flag = 1;
  if (_internal_has_flag()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserOnlineRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserOnlineRes)
  GOOGLE_DCHECK_NE(&from, this);
  const UserOnlineRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserOnlineRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserOnlineRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserOnlineRes)
    MergeFrom(*source);
  }
}

void UserOnlineRes::MergeFrom(const UserOnlineRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserOnlineRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_flag()) {
    _internal_set_flag(from._internal_flag());
  }
}

void UserOnlineRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserOnlineRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOnlineRes::CopyFrom(const UserOnlineRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserOnlineRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOnlineRes::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UserOnlineRes::InternalSwap(UserOnlineRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserOnlineRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MesTranService::~MesTranService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* MesTranService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_5ftransmit_2eproto);
  return file_level_service_descriptors_message_5ftransmit_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* MesTranService::GetDescriptor() {
  return descriptor();
}

void MesTranService::TransmitMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::MesTransReq*,
                         ::MesTransRes*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransmitMessage() not implemented.");
  done->Run();
}

void MesTranService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_message_5ftransmit_2eproto[0]);
  switch(method->index()) {
    case 0:
      TransmitMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::MesTransReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::MesTransRes*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& MesTranService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::MesTransReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& MesTranService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::MesTransRes::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

MesTranService_Stub::MesTranService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MesTranService_Stub::MesTranService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
MesTranService_Stub::~MesTranService_Stub() {
  if (owns_channel_) delete channel_;
}

void MesTranService_Stub::TransmitMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::MesTransReq* request,
                              ::MesTransRes* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

HeartBeatService::~HeartBeatService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* HeartBeatService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_5ftransmit_2eproto);
  return file_level_service_descriptors_message_5ftransmit_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* HeartBeatService::GetDescriptor() {
  return descriptor();
}

void HeartBeatService::HeartBeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::HeartBeatReq*,
                         ::HeartBeatRes*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method HeartBeat() not implemented.");
  done->Run();
}

void HeartBeatService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_message_5ftransmit_2eproto[1]);
  switch(method->index()) {
    case 0:
      HeartBeat(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::HeartBeatReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::HeartBeatRes*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& HeartBeatService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::HeartBeatReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& HeartBeatService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::HeartBeatRes::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

HeartBeatService_Stub::HeartBeatService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
HeartBeatService_Stub::HeartBeatService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
HeartBeatService_Stub::~HeartBeatService_Stub() {
  if (owns_channel_) delete channel_;
}

void HeartBeatService_Stub::HeartBeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::HeartBeatReq* request,
                              ::HeartBeatRes* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

UserOnlineService::~UserOnlineService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* UserOnlineService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_5ftransmit_2eproto);
  return file_level_service_descriptors_message_5ftransmit_2eproto[2];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* UserOnlineService::GetDescriptor() {
  return descriptor();
}

void UserOnlineService::UserOnline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::UserOnlineReq*,
                         ::UserOnlineRes*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UserOnline() not implemented.");
  done->Run();
}

void UserOnlineService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_message_5ftransmit_2eproto[2]);
  switch(method->index()) {
    case 0:
      UserOnline(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::UserOnlineReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::UserOnlineRes*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& UserOnlineService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::UserOnlineReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& UserOnlineService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::UserOnlineRes::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

UserOnlineService_Stub::UserOnlineService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
UserOnlineService_Stub::UserOnlineService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
UserOnlineService_Stub::~UserOnlineService_Stub() {
  if (owns_channel_) delete channel_;
}

void UserOnlineService_Stub::UserOnline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::UserOnlineReq* request,
                              ::UserOnlineRes* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MesTransReq* Arena::CreateMaybeMessage< ::MesTransReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MesTransReq >(arena);
}
template<> PROTOBUF_NOINLINE ::MesTransRes* Arena::CreateMaybeMessage< ::MesTransRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MesTransRes >(arena);
}
template<> PROTOBUF_NOINLINE ::HeartBeatReq* Arena::CreateMaybeMessage< ::HeartBeatReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HeartBeatReq >(arena);
}
template<> PROTOBUF_NOINLINE ::HeartBeatRes* Arena::CreateMaybeMessage< ::HeartBeatRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HeartBeatRes >(arena);
}
template<> PROTOBUF_NOINLINE ::UserOnlineReq* Arena::CreateMaybeMessage< ::UserOnlineReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserOnlineReq >(arena);
}
template<> PROTOBUF_NOINLINE ::UserOnlineRes* Arena::CreateMaybeMessage< ::UserOnlineRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserOnlineRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
