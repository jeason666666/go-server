// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_friend_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_friend_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_friend_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_friend_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_friend_5finfo_2eproto;
class FriendGetReq;
class FriendGetReqDefaultTypeInternal;
extern FriendGetReqDefaultTypeInternal _FriendGetReq_default_instance_;
class FriendGetRes;
class FriendGetResDefaultTypeInternal;
extern FriendGetResDefaultTypeInternal _FriendGetRes_default_instance_;
class FriendRequestReq;
class FriendRequestReqDefaultTypeInternal;
extern FriendRequestReqDefaultTypeInternal _FriendRequestReq_default_instance_;
class FriendRequestRes;
class FriendRequestResDefaultTypeInternal;
extern FriendRequestResDefaultTypeInternal _FriendRequestRes_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FriendGetReq* Arena::CreateMaybeMessage<::FriendGetReq>(Arena*);
template<> ::FriendGetRes* Arena::CreateMaybeMessage<::FriendGetRes>(Arena*);
template<> ::FriendRequestReq* Arena::CreateMaybeMessage<::FriendRequestReq>(Arena*);
template<> ::FriendRequestRes* Arena::CreateMaybeMessage<::FriendRequestRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum FRIEND_REQUEST_OP : int {
  GET_FRIEND = 1,
  ADD_FRIEND = 2,
  AGREE_ADD = 3
};
bool FRIEND_REQUEST_OP_IsValid(int value);
constexpr FRIEND_REQUEST_OP FRIEND_REQUEST_OP_MIN = GET_FRIEND;
constexpr FRIEND_REQUEST_OP FRIEND_REQUEST_OP_MAX = AGREE_ADD;
constexpr int FRIEND_REQUEST_OP_ARRAYSIZE = FRIEND_REQUEST_OP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FRIEND_REQUEST_OP_descriptor();
template<typename T>
inline const std::string& FRIEND_REQUEST_OP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FRIEND_REQUEST_OP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FRIEND_REQUEST_OP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FRIEND_REQUEST_OP_descriptor(), enum_t_value);
}
inline bool FRIEND_REQUEST_OP_Parse(
    const std::string& name, FRIEND_REQUEST_OP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FRIEND_REQUEST_OP>(
    FRIEND_REQUEST_OP_descriptor(), name, value);
}
// ===================================================================

class FriendRequestReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendRequestReq) */ {
 public:
  inline FriendRequestReq() : FriendRequestReq(nullptr) {};
  virtual ~FriendRequestReq();

  FriendRequestReq(const FriendRequestReq& from);
  FriendRequestReq(FriendRequestReq&& from) noexcept
    : FriendRequestReq() {
    *this = ::std::move(from);
  }

  inline FriendRequestReq& operator=(const FriendRequestReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendRequestReq& operator=(FriendRequestReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendRequestReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendRequestReq* internal_default_instance() {
    return reinterpret_cast<const FriendRequestReq*>(
               &_FriendRequestReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FriendRequestReq& a, FriendRequestReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendRequestReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendRequestReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendRequestReq* New() const final {
    return CreateMaybeMessage<FriendRequestReq>(nullptr);
  }

  FriendRequestReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendRequestReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendRequestReq& from);
  void MergeFrom(const FriendRequestReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRequestReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendRequestReq";
  }
  protected:
  explicit FriendRequestReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_5finfo_2eproto);
    return ::descriptor_table_friend_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kFriendIdFieldNumber = 3,
    kOpTypeFieldNumber = 1,
  };
  // required int32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 friend_id = 3;
  bool has_friend_id() const;
  private:
  bool _internal_has_friend_id() const;
  public:
  void clear_friend_id();
  ::PROTOBUF_NAMESPACE_ID::int32 friend_id() const;
  void set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_friend_id() const;
  void _internal_set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .FRIEND_REQUEST_OP op_type = 1;
  bool has_op_type() const;
  private:
  bool _internal_has_op_type() const;
  public:
  void clear_op_type();
  ::FRIEND_REQUEST_OP op_type() const;
  void set_op_type(::FRIEND_REQUEST_OP value);
  private:
  ::FRIEND_REQUEST_OP _internal_op_type() const;
  void _internal_set_op_type(::FRIEND_REQUEST_OP value);
  public:

  // @@protoc_insertion_point(class_scope:FriendRequestReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 friend_id_;
  int op_type_;
  friend struct ::TableStruct_friend_5finfo_2eproto;
};
// -------------------------------------------------------------------

class FriendRequestRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendRequestRes) */ {
 public:
  inline FriendRequestRes() : FriendRequestRes(nullptr) {};
  virtual ~FriendRequestRes();

  FriendRequestRes(const FriendRequestRes& from);
  FriendRequestRes(FriendRequestRes&& from) noexcept
    : FriendRequestRes() {
    *this = ::std::move(from);
  }

  inline FriendRequestRes& operator=(const FriendRequestRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendRequestRes& operator=(FriendRequestRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendRequestRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendRequestRes* internal_default_instance() {
    return reinterpret_cast<const FriendRequestRes*>(
               &_FriendRequestRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FriendRequestRes& a, FriendRequestRes& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendRequestRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendRequestRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendRequestRes* New() const final {
    return CreateMaybeMessage<FriendRequestRes>(nullptr);
  }

  FriendRequestRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendRequestRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendRequestRes& from);
  void MergeFrom(const FriendRequestRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRequestRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendRequestRes";
  }
  protected:
  explicit FriendRequestRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_5finfo_2eproto);
    return ::descriptor_table_friend_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kUsernamesFieldNumber = 2,
  };
  // repeated int32 ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ids() const;
  void _internal_add_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ids(int index) const;
  void set_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ids();

  // repeated string usernames = 2;
  int usernames_size() const;
  private:
  int _internal_usernames_size() const;
  public:
  void clear_usernames();
  const std::string& usernames(int index) const;
  std::string* mutable_usernames(int index);
  void set_usernames(int index, const std::string& value);
  void set_usernames(int index, std::string&& value);
  void set_usernames(int index, const char* value);
  void set_usernames(int index, const char* value, size_t size);
  std::string* add_usernames();
  void add_usernames(const std::string& value);
  void add_usernames(std::string&& value);
  void add_usernames(const char* value);
  void add_usernames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& usernames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_usernames();
  private:
  const std::string& _internal_usernames(int index) const;
  std::string* _internal_add_usernames();
  public:

  // @@protoc_insertion_point(class_scope:FriendRequestRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> usernames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friend_5finfo_2eproto;
};
// -------------------------------------------------------------------

class FriendGetReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendGetReq) */ {
 public:
  inline FriendGetReq() : FriendGetReq(nullptr) {};
  virtual ~FriendGetReq();

  FriendGetReq(const FriendGetReq& from);
  FriendGetReq(FriendGetReq&& from) noexcept
    : FriendGetReq() {
    *this = ::std::move(from);
  }

  inline FriendGetReq& operator=(const FriendGetReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendGetReq& operator=(FriendGetReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendGetReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendGetReq* internal_default_instance() {
    return reinterpret_cast<const FriendGetReq*>(
               &_FriendGetReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FriendGetReq& a, FriendGetReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendGetReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendGetReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendGetReq* New() const final {
    return CreateMaybeMessage<FriendGetReq>(nullptr);
  }

  FriendGetReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendGetReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendGetReq& from);
  void MergeFrom(const FriendGetReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendGetReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendGetReq";
  }
  protected:
  explicit FriendGetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_5finfo_2eproto);
    return ::descriptor_table_friend_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FriendGetReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_friend_5finfo_2eproto;
};
// -------------------------------------------------------------------

class FriendGetRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendGetRes) */ {
 public:
  inline FriendGetRes() : FriendGetRes(nullptr) {};
  virtual ~FriendGetRes();

  FriendGetRes(const FriendGetRes& from);
  FriendGetRes(FriendGetRes&& from) noexcept
    : FriendGetRes() {
    *this = ::std::move(from);
  }

  inline FriendGetRes& operator=(const FriendGetRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendGetRes& operator=(FriendGetRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendGetRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendGetRes* internal_default_instance() {
    return reinterpret_cast<const FriendGetRes*>(
               &_FriendGetRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FriendGetRes& a, FriendGetRes& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendGetRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendGetRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendGetRes* New() const final {
    return CreateMaybeMessage<FriendGetRes>(nullptr);
  }

  FriendGetRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendGetRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendGetRes& from);
  void MergeFrom(const FriendGetRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendGetRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendGetRes";
  }
  protected:
  explicit FriendGetRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_friend_5finfo_2eproto);
    return ::descriptor_table_friend_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendIdsFieldNumber = 1,
    kUsernamesFieldNumber = 2,
  };
  // repeated int32 friend_ids = 1;
  int friend_ids_size() const;
  private:
  int _internal_friend_ids_size() const;
  public:
  void clear_friend_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_friend_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_friend_ids() const;
  void _internal_add_friend_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_friend_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 friend_ids(int index) const;
  void set_friend_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_friend_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      friend_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_friend_ids();

  // repeated string usernames = 2;
  int usernames_size() const;
  private:
  int _internal_usernames_size() const;
  public:
  void clear_usernames();
  const std::string& usernames(int index) const;
  std::string* mutable_usernames(int index);
  void set_usernames(int index, const std::string& value);
  void set_usernames(int index, std::string&& value);
  void set_usernames(int index, const char* value);
  void set_usernames(int index, const char* value, size_t size);
  std::string* add_usernames();
  void add_usernames(const std::string& value);
  void add_usernames(std::string&& value);
  void add_usernames(const char* value);
  void add_usernames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& usernames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_usernames();
  private:
  const std::string& _internal_usernames(int index) const;
  std::string* _internal_add_usernames();
  public:

  // @@protoc_insertion_point(class_scope:FriendGetRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > friend_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> usernames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_friend_5finfo_2eproto;
};
// ===================================================================

class FriendRequestService_Stub;

class FriendRequestService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FriendRequestService() {};
 public:
  virtual ~FriendRequestService();

  typedef FriendRequestService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void FriendRequest(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::FriendRequestReq* request,
                       ::FriendRequestRes* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendRequestService);
};

class FriendRequestService_Stub : public FriendRequestService {
 public:
  FriendRequestService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  FriendRequestService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~FriendRequestService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements FriendRequestService ------------------------------------------

  void FriendRequest(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::FriendRequestReq* request,
                       ::FriendRequestRes* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendRequestService_Stub);
};


// -------------------------------------------------------------------

class FriendGetService_Stub;

class FriendGetService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FriendGetService() {};
 public:
  virtual ~FriendGetService();

  typedef FriendGetService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void FriendGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::FriendGetReq* request,
                       ::FriendGetRes* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendGetService);
};

class FriendGetService_Stub : public FriendGetService {
 public:
  FriendGetService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  FriendGetService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~FriendGetService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements FriendGetService ------------------------------------------

  void FriendGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::FriendGetReq* request,
                       ::FriendGetRes* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendGetService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FriendRequestReq

// required .FRIEND_REQUEST_OP op_type = 1;
inline bool FriendRequestReq::_internal_has_op_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FriendRequestReq::has_op_type() const {
  return _internal_has_op_type();
}
inline void FriendRequestReq::clear_op_type() {
  op_type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::FRIEND_REQUEST_OP FriendRequestReq::_internal_op_type() const {
  return static_cast< ::FRIEND_REQUEST_OP >(op_type_);
}
inline ::FRIEND_REQUEST_OP FriendRequestReq::op_type() const {
  // @@protoc_insertion_point(field_get:FriendRequestReq.op_type)
  return _internal_op_type();
}
inline void FriendRequestReq::_internal_set_op_type(::FRIEND_REQUEST_OP value) {
  assert(::FRIEND_REQUEST_OP_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  op_type_ = value;
}
inline void FriendRequestReq::set_op_type(::FRIEND_REQUEST_OP value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:FriendRequestReq.op_type)
}

// required int32 id = 2;
inline bool FriendRequestReq::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FriendRequestReq::has_id() const {
  return _internal_has_id();
}
inline void FriendRequestReq::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendRequestReq::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendRequestReq::id() const {
  // @@protoc_insertion_point(field_get:FriendRequestReq.id)
  return _internal_id();
}
inline void FriendRequestReq::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void FriendRequestReq::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:FriendRequestReq.id)
}

// optional int32 friend_id = 3;
inline bool FriendRequestReq::_internal_has_friend_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FriendRequestReq::has_friend_id() const {
  return _internal_has_friend_id();
}
inline void FriendRequestReq::clear_friend_id() {
  friend_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendRequestReq::_internal_friend_id() const {
  return friend_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendRequestReq::friend_id() const {
  // @@protoc_insertion_point(field_get:FriendRequestReq.friend_id)
  return _internal_friend_id();
}
inline void FriendRequestReq::_internal_set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  friend_id_ = value;
}
inline void FriendRequestReq::set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:FriendRequestReq.friend_id)
}

// -------------------------------------------------------------------

// FriendRequestRes

// repeated int32 ids = 1;
inline int FriendRequestRes::_internal_ids_size() const {
  return ids_.size();
}
inline int FriendRequestRes::ids_size() const {
  return _internal_ids_size();
}
inline void FriendRequestRes::clear_ids() {
  ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendRequestRes::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendRequestRes::ids(int index) const {
  // @@protoc_insertion_point(field_get:FriendRequestRes.ids)
  return _internal_ids(index);
}
inline void FriendRequestRes::set_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:FriendRequestRes.ids)
}
inline void FriendRequestRes::_internal_add_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ids_.Add(value);
}
inline void FriendRequestRes::add_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:FriendRequestRes.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FriendRequestRes::_internal_ids() const {
  return ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FriendRequestRes::ids() const {
  // @@protoc_insertion_point(field_list:FriendRequestRes.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FriendRequestRes::_internal_mutable_ids() {
  return &ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FriendRequestRes::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:FriendRequestRes.ids)
  return _internal_mutable_ids();
}

// repeated string usernames = 2;
inline int FriendRequestRes::_internal_usernames_size() const {
  return usernames_.size();
}
inline int FriendRequestRes::usernames_size() const {
  return _internal_usernames_size();
}
inline void FriendRequestRes::clear_usernames() {
  usernames_.Clear();
}
inline std::string* FriendRequestRes::add_usernames() {
  // @@protoc_insertion_point(field_add_mutable:FriendRequestRes.usernames)
  return _internal_add_usernames();
}
inline const std::string& FriendRequestRes::_internal_usernames(int index) const {
  return usernames_.Get(index);
}
inline const std::string& FriendRequestRes::usernames(int index) const {
  // @@protoc_insertion_point(field_get:FriendRequestRes.usernames)
  return _internal_usernames(index);
}
inline std::string* FriendRequestRes::mutable_usernames(int index) {
  // @@protoc_insertion_point(field_mutable:FriendRequestRes.usernames)
  return usernames_.Mutable(index);
}
inline void FriendRequestRes::set_usernames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:FriendRequestRes.usernames)
  usernames_.Mutable(index)->assign(value);
}
inline void FriendRequestRes::set_usernames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:FriendRequestRes.usernames)
  usernames_.Mutable(index)->assign(std::move(value));
}
inline void FriendRequestRes::set_usernames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  usernames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FriendRequestRes.usernames)
}
inline void FriendRequestRes::set_usernames(int index, const char* value, size_t size) {
  usernames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FriendRequestRes.usernames)
}
inline std::string* FriendRequestRes::_internal_add_usernames() {
  return usernames_.Add();
}
inline void FriendRequestRes::add_usernames(const std::string& value) {
  usernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FriendRequestRes.usernames)
}
inline void FriendRequestRes::add_usernames(std::string&& value) {
  usernames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FriendRequestRes.usernames)
}
inline void FriendRequestRes::add_usernames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  usernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FriendRequestRes.usernames)
}
inline void FriendRequestRes::add_usernames(const char* value, size_t size) {
  usernames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FriendRequestRes.usernames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FriendRequestRes::usernames() const {
  // @@protoc_insertion_point(field_list:FriendRequestRes.usernames)
  return usernames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FriendRequestRes::mutable_usernames() {
  // @@protoc_insertion_point(field_mutable_list:FriendRequestRes.usernames)
  return &usernames_;
}

// -------------------------------------------------------------------

// FriendGetReq

// required int32 id = 1;
inline bool FriendGetReq::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FriendGetReq::has_id() const {
  return _internal_has_id();
}
inline void FriendGetReq::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendGetReq::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendGetReq::id() const {
  // @@protoc_insertion_point(field_get:FriendGetReq.id)
  return _internal_id();
}
inline void FriendGetReq::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void FriendGetReq::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:FriendGetReq.id)
}

// -------------------------------------------------------------------

// FriendGetRes

// repeated int32 friend_ids = 1;
inline int FriendGetRes::_internal_friend_ids_size() const {
  return friend_ids_.size();
}
inline int FriendGetRes::friend_ids_size() const {
  return _internal_friend_ids_size();
}
inline void FriendGetRes::clear_friend_ids() {
  friend_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendGetRes::_internal_friend_ids(int index) const {
  return friend_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendGetRes::friend_ids(int index) const {
  // @@protoc_insertion_point(field_get:FriendGetRes.friend_ids)
  return _internal_friend_ids(index);
}
inline void FriendGetRes::set_friend_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  friend_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:FriendGetRes.friend_ids)
}
inline void FriendGetRes::_internal_add_friend_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  friend_ids_.Add(value);
}
inline void FriendGetRes::add_friend_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_friend_ids(value);
  // @@protoc_insertion_point(field_add:FriendGetRes.friend_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FriendGetRes::_internal_friend_ids() const {
  return friend_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FriendGetRes::friend_ids() const {
  // @@protoc_insertion_point(field_list:FriendGetRes.friend_ids)
  return _internal_friend_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FriendGetRes::_internal_mutable_friend_ids() {
  return &friend_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FriendGetRes::mutable_friend_ids() {
  // @@protoc_insertion_point(field_mutable_list:FriendGetRes.friend_ids)
  return _internal_mutable_friend_ids();
}

// repeated string usernames = 2;
inline int FriendGetRes::_internal_usernames_size() const {
  return usernames_.size();
}
inline int FriendGetRes::usernames_size() const {
  return _internal_usernames_size();
}
inline void FriendGetRes::clear_usernames() {
  usernames_.Clear();
}
inline std::string* FriendGetRes::add_usernames() {
  // @@protoc_insertion_point(field_add_mutable:FriendGetRes.usernames)
  return _internal_add_usernames();
}
inline const std::string& FriendGetRes::_internal_usernames(int index) const {
  return usernames_.Get(index);
}
inline const std::string& FriendGetRes::usernames(int index) const {
  // @@protoc_insertion_point(field_get:FriendGetRes.usernames)
  return _internal_usernames(index);
}
inline std::string* FriendGetRes::mutable_usernames(int index) {
  // @@protoc_insertion_point(field_mutable:FriendGetRes.usernames)
  return usernames_.Mutable(index);
}
inline void FriendGetRes::set_usernames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:FriendGetRes.usernames)
  usernames_.Mutable(index)->assign(value);
}
inline void FriendGetRes::set_usernames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:FriendGetRes.usernames)
  usernames_.Mutable(index)->assign(std::move(value));
}
inline void FriendGetRes::set_usernames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  usernames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FriendGetRes.usernames)
}
inline void FriendGetRes::set_usernames(int index, const char* value, size_t size) {
  usernames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FriendGetRes.usernames)
}
inline std::string* FriendGetRes::_internal_add_usernames() {
  return usernames_.Add();
}
inline void FriendGetRes::add_usernames(const std::string& value) {
  usernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FriendGetRes.usernames)
}
inline void FriendGetRes::add_usernames(std::string&& value) {
  usernames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FriendGetRes.usernames)
}
inline void FriendGetRes::add_usernames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  usernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FriendGetRes.usernames)
}
inline void FriendGetRes::add_usernames(const char* value, size_t size) {
  usernames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FriendGetRes.usernames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FriendGetRes::usernames() const {
  // @@protoc_insertion_point(field_list:FriendGetRes.usernames)
  return usernames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FriendGetRes::mutable_usernames() {
  // @@protoc_insertion_point(field_mutable_list:FriendGetRes.usernames)
  return &usernames_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::FRIEND_REQUEST_OP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FRIEND_REQUEST_OP>() {
  return ::FRIEND_REQUEST_OP_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_friend_5finfo_2eproto
